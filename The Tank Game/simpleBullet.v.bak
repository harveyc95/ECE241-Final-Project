// copy to test simple bullet commands
module simpleBulletAdapter
	(
		CLOCK_50,						//	On Board 50 MHz
		KEY,								//	Push Button[3:0]
		SW,								//	DPDT Switch[17:0]
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK,						//	VGA BLANK
		VGA_SYNC,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   							//	VGA Blue[9:0]
	);
	
	input			CLOCK_50;					//	50 MHz
	input	[3:0]	KEY;							//	Button[3:0]
	input	[17:0]	SW;						//	Switches[0:0]
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK;				//	VGA BLANK
	output			VGA_SYNC;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0]
	
	//enable DAC
	wire writeEn;
	
	//pixel COORDINATES
	wire [8:0]x_pos;
	wire [7:0]y_pos;
	
	//single bit color channels
	wire [2:0]color;
	
	//user triggered values
	wire resetn;
	assign resetn = ~SW[0];
	
	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(color),
			.x(x_pos),
			.y(y_pos),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK),
			.VGA_SYNC(VGA_SYNC),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "320x240";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "blueScreenLargeRez.mif";
	
	//connect for easy testing
	//											SW0		makeB		xCoord	yCoord	directions (UpDownLeftRight)
	simpleBullet oneBullet(CLOCK_50, resetn, ~KEY[0], SW[17:9], SW[16:9], SW[4:1],
									x_pos, y_pos, color, writeEn);
endmodule
// above module is useless in the end implementation (only copy below into project)


//MAKE and MOVE single bullets to edge of boundary
module simpleBullet(iCLOCK_50, iresetn, iMakeBullet, iXinit, iYinit, iDinit, oX, oY, oColor, owriteEn);
	input iCLOCK_50, iresetn, iMakeBullet;
	input [8:0]iXinit;
	input [7:0]iYinit;
	input [3:0]iDinit;
	output [8:0]oX;
	output [7:0]oY;
	output [2:0]oColor;
	output owriteEn;
	
	//STATES
	parameter [3:0] ST_wait = 0, ST_drawB = 1, ST_delayB = 2, ST_eraseB = 3, ST_incrB = 4;
	//state FFs
	reg [3:0] NState, CState;
	always@(posedge iCLOCK_50) begin
		if (!iresetn)
			CState <= ST_wait;
		else
			CState <= NState;
	end
	// end FFs
	//RULES
	always@(*) begin
		NState <= ST_wait;
		case(CState)
				ST_wait: begin
						if (iMakeBullet) //started by exterior fsm
							NState <= ST_drawB;
						else
							NState <= ST_wait;
					end
				ST_drawB: begin
						if (doneDrawing) //signal back from lower level fsm
							NState <= ST_delayB;
						else
							NState <= ST_drawB;
					end
				ST_delayB: begin //independently synchronize with screen
						if (doneDelayB)
							NState <= ST_eraseB;
						else
							NState <= ST_delayB;
					end
				ST_eraseB: begin
						if (doneDrawing) //signal back
							NState <= ST_incrB;
						else
							NState <= ST_eraseB;
					end
				ST_incrB: begin //check if bullet reached edge of (30pixel) boundary on 320x240rez
						if ( (abullet[13:5]<31) || (abullet[13:5]>287) || (abullet[21:14]<31) || (abullet[21:14]>207) )
							NState <= ST_wait;
						else
							NState <= ST_drawB;
					end
				default:
							NState <= ST_wait;
		endcase
	end
	// those were the state rules
	
	reg [21:0]abullet; //storesBullet: {bit0}status {4-1}direction {13-5}x {21-14}y
	reg dodrawB; //flags to control drawing and delays
	reg doeraseB;
	wire doneDrawing;
	reg [19:0]delaycountB;
	reg doneDelayB;
	
	always@(posedge iCLOCK_50) begin
		if (CState == ST_wait) begin
				dodrawB = 0;
				doeraseB = 0;
				doneDelayB = 0; //unnecessary?
				abullet[21:14] = iYinit;
				abullet[13:5] = iXinit;
				abullet[4:1] = iDinit[3:0];
			end
		if (CState == ST_drawB) begin
			dodrawB = 1;
			end
		if (CState == ST_delayB) begin
			dodrawB = 0;
			if (doneDelayB)
				delaycountB = 0; //should this reset be here?
			else
				delaycountB = delaycountB + 1;
			doneDelayB = (delaycountB == 433000); //ADJUST #
			end
		if (CState == ST_eraseB) begin
			doneDelayB = 0;
			doeraseB = 1;
			end
		if (CState == ST_incrB) begin
			doeraseB = 0;
			if (abullet[4]) //== 4'b1000) //up
				abullet[21:14] = abullet[21:14] - 1;
			else if (abullet[3]) //== 4'b0100) //down
				abullet[21:14] = abullet[21:14] + 1;
			else if (abullet[2]) //== 4'b0010) //left
				abullet[13:5] = abullet[13:5] - 2;
			else if (abullet[1]) //== 4'b0001) //right
				abullet[13:5] = abullet[13:5] + 2;
		end
	end
	// done operations
	
	drawPLUSerase drawneraseit(iCLOCK_50, iresetn, dodrawB, doeraseB, abullet[13:5], abullet[21:14],
											oColor, oX, oY, owriteEn, doneDrawing);
endmodule

module drawPLUSerase (iCLOCK_50, iresetn, idrawEn, ieraseEn, ix_pos, iy_pos, ocolor_out, ox, oy, owriteEn, oDoneSignal);
	
	input iCLOCK_50, iresetn, idrawEn, ieraseEn;
	input [8:0]ix_pos;
	input [7:0]iy_pos;
	output [2:0]ocolor_out;
	output reg [8:0]ox;
	output reg [7:0]oy;
	output reg owriteEn;
	output reg oDoneSignal;
	
	reg [2:0]x_counter, y_counter; //up to 2
	reg draw;
	assign ocolor_out = draw ? 3'b000 : 3'b111; // BLACK bullets, 2x2box, WHITE erase
	
	//STATES and State FFs
	parameter [3:0] ST_idle = 0, ST_chooseColor = 4, ST_setMem = 1, ST_draw = 2, ST_count = 3, ST_Done = 5;
	
	reg [3:0] CState, NState;
	always@(posedge iCLOCK_50) begin
		if (!iresetn)
			CState <= ST_idle;
		else
			CState <= NState;
	end
	//end fsm setup
	
	//CHANGING STATE
	always@(*) begin
		NState <= ST_idle;
		case(CState)
				ST_idle: begin
					if (idrawEn || ieraseEn)
						NState <= ST_chooseColor;
					else
						NState <= ST_idle;
					end
				ST_chooseColor:
						NState <= ST_setMem;
				ST_setMem:
						NState <= ST_draw;
				ST_draw: begin
					if (y_counter == 1 && x_counter == 1) // stop when y_counter at pt (1,1)
						NState <= ST_Done;
					else
						NState <= ST_count;
					end
				ST_count:
						NState <= ST_draw;
				ST_Done:
						NState <= ST_idle;
				default:
						NState <= ST_idle; 
		endcase
	end
	// end state rules
	
	//VARIOUS COUNTERS
	always@(posedge iCLOCK_50) begin
		if (CState == ST_idle) begin
			owriteEn = 0;
			oDoneSignal = 0;
			end
		if (CState == ST_setMem) begin
			x_counter = 0;
			y_counter = 0;
			end
		if (CState == ST_chooseColor) begin
			if(idrawEn)
				draw = 1;
			else if(ieraseEn)
				draw = 0;
			end
		if (CState == ST_count) begin
			owriteEn = 0;
			if (x_counter < 1) // increments x_counter until x_counter is > 1
				x_counter = x_counter + 1;
			else begin
				x_counter = 0; // resets x_counter
				y_counter = y_counter + 1; // increments y_counter
				end
			end
			
		if (CState == ST_draw)
			owriteEn = 1;
			
		if (CState == ST_Done)
			oDoneSignal = 1;
			
		ox = ix_pos + x_counter;
		oy = iy_pos + y_counter;
	end
	// end counters
endmodule
